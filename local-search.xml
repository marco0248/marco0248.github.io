<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>B-tree</title>
    <link href="/2022/08/03/B-tree/"/>
    <url>/2022/08/03/B-tree/</url>
    
    <content type="html"><![CDATA[<h2 id="一、B树的性质"><a href="#一、B树的性质" class="headerlink" title="一、B树的性质"></a>一、B树的性质</h2><pre><code class="hljs">一颗M阶B树T，满足以下条件1. 每个结点至多拥有M课子树；2. 根结点至少拥有两颗子树；3. 除了根结点以外，其余每个分支结点至少拥有M/2课子树；4. 所有的叶结点都在同一层上；5. 有k课子树的分支结点则存在k-1个关键字，关键字按照递增顺序进行排序；6. 关键字数量满足ceil(M/2)-1 &lt;= n &lt;= M-1。</code></pre><p>例子：关键字为26英文字母，阶数M为6，按顺序插入得到的B-tree如下所示。<br><img src="/.com//B-tree_1.jpg" alt=" "></p><h2 id="二、B树的创建"><a href="#二、B树的创建" class="headerlink" title="二、B树的创建"></a>二、B树的创建</h2><h3 id="2-1-节点的定义"><a href="#2-1-节点的定义" class="headerlink" title="2.1 节点的定义"></a>2.1 节点的定义</h3><pre><code class="hljs">/** * B-tree * create by marco **/#include &lt;iostream&gt;#include&lt;vector&gt;using namespace std;typedef int KEY_VALUE;/* 节点数据结构 */struct btree_node &#123;    KEY_VALUE *keys;    // 节点中的关键字数组    struct btree_node **children;   // 指向子节点的数组    int num;    // 节点中关键字个数    int leaf;   // 是否是叶子节点&#125;;/* 创建B树节点 */btree_node* btree_node_create(int dgree, int leaf) &#123;    btree_node *node = (btree_node*)calloc(1, sizeof(btree_node));    if (node == nullptr) &#123;        printf(&quot;btree_node_create failed!\n&quot;);        return nullptr;    &#125;    node-&gt;leaf = leaf;    node-&gt;keys = (KEY_VALUE*)calloc(1, (dgree * 2 - 1) * sizeof(KEY_VALUE));    node-&gt;children = (btree_node**)calloc(1, (dgree * 2) * sizeof   (btree_node));    node-&gt;num = 0;    return node;&#125;/* 释放B树节点 */void btree_node_destory(btree_node *node)&#123;    if (node == nullptr)        return;    free(node-&gt;children);    free(node-&gt;keys);    free(node);&#125;</code></pre><h3 id="2-2-B树的定义"><a href="#2-2-B树的定义" class="headerlink" title="2.2 B树的定义"></a>2.2 B树的定义</h3><pre><code class="hljs">struct btree &#123;    struct btree_node *root;    // 指向B树的根节点    int dgree;  // B树的阶数的一半， 如此设置方便之后判断节点是否需要操作&#125;;/* 创建B树 */btree* btree_create(int dgree)&#123;    btree *T = new btree;    T-&gt;dgree = dgree;    btree_node *node = btree_node_create(dgree, 1);    T-&gt;root = node;    return T;&#125;</code></pre><h2 id="三、B树的插入操作"><a href="#三、B树的插入操作" class="headerlink" title="三、B树的插入操作"></a>三、B树的插入操作</h2><p>B树插入关键字的主要思想：</p><ol><li><p>首先二叉遍历找到待插入的叶子节点。注意，B树关键字的插入，必然是插入到叶子节点，可以这么理解，不遍历到叶子节点是无法判断关键字是否已存在的。</p></li><li><p>判断叶子节点的关键字个数是否小于阶数M-1，若小于即可直接判断插入的具体位置。插入关键字B、C、D如下图所示。<br><img src="/.com//B-tree_2.png" alt=" "></p></li><li><p>如果关键字个数等于阶数M-1，则表示该节点已满，需要分裂节点。分裂叶子节点的具体规则为：将中间关键字（索引为阶数M&#x2F;2 - 1）放入父节点，新建节点存入被分裂叶子节点的后一半数据，并将新建节点插入到父节点中，排在被分裂叶子节点的分支之后。记得更新被分裂的叶子节点，已经被瓜分啦。插入关键字F如下图所示。<br><img src="/.com//B-tree_3.png" alt=" "></p></li><li><p>注意此时需要递归判断父节点的关键字个数，如果等于阶数M-1，则需继续分裂。</p></li><li><p>分裂结束即可插入关键字。</p></li></ol><p>具体实现代码如下：</p><pre><code class="hljs">/* 分裂B树节点 *//** * 参数列表： *      btree *T : B树指针 *      btree_node *x : 待分裂节点的父节点指针 *      int index : 待分裂节点在父节点中的孩子指针索引 * */void btree_node_split(btree *T, btree_node *x, int index)&#123;    int dgree = T-&gt;dgree;    btree_node * y = x-&gt;children[index];    /* 新建节点z,将待分裂节点的后一半关键字放入新节点z */    btree_node *z = btree_node_create(dgree, y-&gt;leaf); // 创建节点，传入参  数为：节点的阶数+是否叶子节点    z-&gt;num = dgree - 1; // 设置新节点z的关键字个数    for (int k = dgree; k &lt; 2 * dgree - 1; ++k)    &#123;        z-&gt;keys[k - dgree] = y-&gt;keys[k];    &#125;    if (y-&gt;leaf == 0)   // 若待分裂节点为非叶子节点，则拥有的子树也需要复制到   新节点z    &#123;        for (int k = dgree; k &lt; 2 * dgree; ++k )        &#123;            z-&gt;children[k - dgree] = y-&gt;children[k];        &#125;    &#125;    /* 将分裂出的关键字放入父节点x */    for (int k = x-&gt;num - 1; k &gt;= index; k--)   // 将后半关键字往后移动位   置，腾出空间，以便存放分裂节点的中间关键字    &#123;        x-&gt;keys[k + 1] = x-&gt;keys[k];    &#125;    x-&gt;keys[index] = y-&gt;keys[dgree - 1];     x-&gt;num += 1;    y-&gt;num = dgree - 1;    /* 将新建节点z作为子树插入到x节点 */    for (int k = x-&gt;num; k &gt; index; --k)    // 将父节点中部分子树往后移动一 个单位，以便插入新建节点z    &#123;        x-&gt;children[k + 1] = x-&gt;children[k];    &#125;      x-&gt;children[index + 1] = z;&#125;/* 插入关键字---根节点非满 */void btree_insert_key_nodeNonFull(btree *T, btree_node *x, KEY_VALUE key)&#123;    int index = x-&gt;num - 1;    if (x-&gt;leaf == 1)     &#123;        while (index &gt;= 0 &amp;&amp; x-&gt;keys[index] &gt; key )        &#123;            x-&gt;keys[index + 1] = x-&gt;keys[index];            index--;        &#125;        x-&gt;keys[index + 1] = key;        x-&gt;num += 1;    &#125;    else    // 非叶子节点，则该节点必然不会是待插入节点，继续往下探索，探索过程中判断即将探索的下层节点关键字是否满，满了需要分裂    &#123;        while (index &gt;= 0 &amp;&amp; x-&gt;keys[index] &gt; key)            index--;        if (x-&gt;children[index + 1]-&gt;num == (2 * T-&gt;dgree - 1))        &#123;            btree_node_split(T, x, index + 1);            if (x-&gt;keys[index + 1] &lt; key)   // 更新待探索的子节点索引，因为 分裂节点会向x节点插入新的关键字，所以要重新判断该关键字是否小于key                index++;        &#125;        btree_insert_key_nodeNonFull(T, x-&gt;children[index + 1], key);    &#125;&#125;/* 插入关键字 */void btree_insert_key(btree *T, KEY_VALUE key)&#123;    btree_node *r = T-&gt;root;    if (r-&gt;num == 2 * T-&gt;dgree - 1) // 特殊情况，根节点关键字满，需要分裂并且   重新设置根节点    &#123;        btree_node *node = btree_node_create(T-&gt;dgree, 0);        T-&gt;root = node;        node-&gt;children[0] = r;        btree_node_split(T, node, 0);        int i = 0;        if (node-&gt;keys[0] &lt; key)    // 判断节点插入的位置            ++i;        btree_insert_key_nodeNonFull(T, node-&gt;children[i], key);    &#125;    else    &#123;        btree_insert_key_nodeNonFull(T, r, key);    &#125;&#125;</code></pre><h2 id="四、B树的删除操作"><a href="#四、B树的删除操作" class="headerlink" title="四、B树的删除操作"></a>四、B树的删除操作</h2><p>B树删除关键字的主要思想：</p><ol><li>首先二叉遍历找到关键字所在的节点。</li><li>判断节点的关键字个数删除之后是否满足：ceil(M&#x2F;2)-1 &lt;&#x3D; n &lt;&#x3D; M-1。满足即可直接删除啦。删除关键字A如下如所示。<br><img src="/.com//B-tree_4.png" alt=" "></li><li>不满足的话，首先判断是否可以向左右兄弟节点借关键字。判断规则：a.左右兄弟节点关键字被借走一个之后个数n仍然满足ceil(M&#x2F;2)-1 &lt;&#x3D; n &lt;&#x3D; M-1；b.当左右兄弟都满足时，选关键字个数多的兄弟节点。</li><li>具体借的规则：首先向父节点借一个左&#x2F;右关键字（与借的节点方位保持一致）放入待删除关键字的节点中，然后将左&#x2F;右兄弟节点中的最大&#x2F;最小关键字复制到父节点中。相应的孩子指针也要相应的移动。删除关键字S如下图所示。<br><img src="/.com//B-tree_5.png" alt=" "></li><li>如果左右子节点都无法借出关键字时，需要进行合并操作，即将左&#x2F;右兄弟节点和当前待删除关键字的节点，以及最后一个小于该关键字的父节点中的关键字合并。删除关键字M如下图所示。<br><img src="/.com//B-tree_6.png" alt=" "></li><li>每个节点中相应的孩子指针的实际操作和关键字类似。</li></ol><p>具体实现代码如下：</p><pre><code class="hljs">/* 合并节点 *//** * 参数列表： *      btree *T : B树指针 *      btree_node *node : 待合并节点的上一次父节点指针 *      int index : 合并需要三个部分---父节点关键字，父节点关键字前后的子节点。 index为父节点关键字索引 * */void btree_node_merge(btree *T, btree_node *node, int index)&#123;    btree_node *left = node-&gt;children[index];   // 合并的左子节点    btree_node *right = node-&gt;children[index + 1];  // 合并的右子节点    /* 将父节点关键字以及右子节点都存入左子节点中 */    left-&gt;keys[T-&gt;dgree - 1] = node-&gt;keys[index];    for (int i = 0; i &lt; right-&gt;num; ++i)    // 移动right中的关键字    &#123;        left-&gt;keys[T-&gt;dgree + i] = right-&gt;keys[i];    &#125;    if (left-&gt;leaf == 0)    // 移动right中的子节点指针    &#123;        for (int i = 0; i &lt;= right-&gt;num; ++i)        &#123;            left-&gt;children[T-&gt;dgree + i] = right-&gt;children[i];        &#125;    &#125;    left-&gt;num += right-&gt;num + 1;    btree_node_destory(right);  // 释放右子节点    for (int i = index + 1; i &lt; node-&gt;num; ++i) // 更新父节点关键字和指向子 节点的指针位置    &#123;        node-&gt;keys[i - 1] = node-&gt;keys[i];        node-&gt;children[i] = node-&gt;children[i + 1];    &#125;    node-&gt;children[node-&gt;num + 1] = nullptr;    node-&gt;num -= 1;    if (node-&gt;num == 0) // 如果父节点个数为0,这种情况只可能是父节点为根节点    &#123;        T-&gt;root = left;        btree_node_destory(node);    &#125;&#125;/* 删除节点中关键字 */void btree_node_delete_key(btree *T, btree_node *node, KEY_VALUE key)&#123;    if (node == nullptr)        return;    int index = 0;    // 找到节点中第一个大于等于key的关键字    while (index &lt; node-&gt;num &amp;&amp; key &gt; node-&gt;keys[index])            index++;    if (index &lt; node-&gt;num &amp;&amp; node-&gt;keys[index] == key) &#123;    // 在该节点中找 到等于key的关键字, 考虑具体的删除操作        if (node-&gt;leaf == 1)    // 该节点为叶子节点        &#123;            for (int i = index; i &lt; node-&gt;num - 1; ++i)            &#123;                node-&gt;keys[i] = node-&gt;keys[i + 1];            &#125;            node-&gt;keys[node-&gt;num - 1] = 0;            node-&gt;num -= 1;            if (node-&gt;num == 0)            &#123;                free(node);                T-&gt;root = nullptr;            &#125;        &#125; else if (node-&gt;children[index]-&gt;num &gt;= T-&gt;dgree) &#123;    // 借用左   子节点的关键字进行覆盖            btree_node * left = node-&gt;children[index];            node-&gt;keys[index] = left-&gt;keys[left-&gt;num - 1];            btree_node_delete_key(T, left, left-&gt;keys[left-&gt;num - 1]);  /   / 递归删除子节点中用来覆盖上层节点的关键字        &#125; else if (node-&gt;children[index + 1]-&gt;num &gt;= T-&gt;dgree) &#123;    // 借   用左子节点的关键字进行覆盖            btree_node *right = node-&gt;children[index + 1];            node-&gt;keys[index] = right-&gt;keys[0];            btree_node_delete_key(T, right, right-&gt;keys[0]);    // 递归删   除子节点中用来覆盖上层节点的关键字        &#125; else &#123;            btree_node_merge(T, node, index);            btree_node_delete_key(T, node-&gt;children[index], key);        &#125;    &#125; else &#123;    // 继续往children[index]子节点找        btree_node *child = node-&gt;children[index];        if (child == nullptr) &#123;            printf(&quot;Cannot find key : %d\n&quot;, key);            return;        &#125;        /* 找关键字所在的节点过程中，遇到关键字个数==dgree-1的节点，进行丰满处  理 */        if (child-&gt;num == T-&gt;dgree - 1) &#123;            btree_node *left = nullptr, *right = nullptr;            if (index &gt; 0)                left = node-&gt;children[index - 1];            if (index &lt; node-&gt;num)                right = node-&gt;children[index + 1];            if ((left &amp;&amp; left-&gt;num &gt;= T-&gt;dgree) || (right &amp;&amp; right-&gt;num     &gt;= T-&gt;dgree)) &#123;                int select = 0;                if (left &amp;&amp; right)                    select = (right-&gt;num &gt; left-&gt;num) ? 1 : 0;                if (select) &#123;   // 选右子树                    /* 将父节点node的第一个大于key的关键字移给child */                    child-&gt;keys[child-&gt;num] = node-&gt;keys[index];                    child-&gt;num += 1;                    child-&gt;children[child-&gt;num] = right-&gt;children[0];                    /* 将child右兄弟节点的第一个关键字移给父节点node */                    node-&gt;keys[index] = right-&gt;keys[0];                    /* 更新child右兄弟节点中关键字和子节点指针的位置 */                    for (int i = 0; i &lt; right-&gt;num - 1; ++i) &#123;                        right-&gt;keys[i] = right-&gt;keys[i + 1];                        right-&gt;children[i] = right-&gt;children[i + 1];                    &#125;                    right-&gt;keys[right-&gt;num - 1] = 0;                    right-&gt;children[right-&gt;num - 1] = right-&gt;children   [right-&gt;num];                    right-&gt;children[right-&gt;num] = nullptr;                    right-&gt;num -= 1;                &#125; else &#123;    // 选左子树                    child-&gt;num++;                    child-&gt;children[child-&gt;num] = child-&gt;children   [child-&gt;num - 1];                    for (int i = child-&gt;num - 2; i &gt;= 0; --i) &#123;                        child-&gt;keys[i + 1] = child-&gt;keys[i];                        child-&gt;children[i + 1] = child-&gt;children[i];                    &#125;                    child-&gt;keys[0] = node-&gt;keys[index - 1];                    child-&gt;children[0] = left-&gt;children[left-&gt;num];                    node-&gt;keys[index - 1] = left-&gt;keys[left-&gt;num - 1];                    left-&gt;keys[left-&gt;num - 1] = 0;                    left-&gt;children[left-&gt;num] = nullptr;                    left-&gt;num -= 1;                &#125;            &#125; else &#123;                if (left &amp;&amp; left-&gt;num == T-&gt;dgree - 1) &#123;                    btree_node_merge(T, node, index - 1);                    child = left;                &#125; else if (right &amp;&amp; right-&gt;num == T-&gt;dgree - 1) &#123;                    btree_node_merge(T, node, index);                &#125;            &#125;        &#125;        btree_node_delete_key(T, child, key);    &#125;&#125;/* 删除B树关键字 */void btree_delete_key(btree *T, KEY_VALUE key) &#123;    if (T-&gt;root == nullptr)        return ;    btree_node_delete_key(T, T-&gt;root, key);&#125;</code></pre><h2 id="五、B树的应用案例"><a href="#五、B树的应用案例" class="headerlink" title="五、B树的应用案例"></a>五、B树的应用案例</h2><pre><code class="hljs">案例一、设计一个图片存储索引组件  1. 图片的数量是巨大的。  2. 可以添加图片，可以删除图片  3. 可以通过图片名称进行查找  4. 添加，删除，查找都是对单一图片进行操作</code></pre><h2 id="六、Tips"><a href="#六、Tips" class="headerlink" title="六、Tips"></a>六、Tips</h2><p>下面代码为打印函数和主函数，所有代码段可组成完整的B树创建、添加、删除代码。</p><pre><code class="hljs">void btree_print(btree *T, btree_node *node, int layer)&#123;    btree_node *p = node;    if (p) &#123;        printf(&quot;\nlayer = %d keynum = %d is_leaf = %d\n&quot;, layer, p-&gt;num, p-&gt;leaf);        for(int i = 0; i &lt; node-&gt;num; i++)            printf(&quot;%C &quot;, p-&gt;keys[i]);        printf(&quot;\n&quot;);        layer++;        for(int i = 0; i &lt;= p-&gt;num; i++)            if(p-&gt;children[i])                btree_print(T, p-&gt;children[i], layer);    &#125;    else         printf(&quot;the tree is empty\n&quot;);&#125;int main() &#123;    btree *T = btree_create(3);    char key[27] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;    for (int i = 0; i &lt; 26; i++) &#123;        printf(&quot;%C &quot;, key[i]);        btree_insert_key(T, key[i]);        btree_print(T, T-&gt;root, 0);    &#125;    btree_print(T, T-&gt;root, 0);    for (int i = 0; i &lt; 26; i++) &#123;        printf(&quot;\n---------------------------------\n&quot;);        btree_delete_key(T, key[25-i]);        btree_print(T, T-&gt;root, 0);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/10/hello-world/"/>
    <url>/2022/06/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
